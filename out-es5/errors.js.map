{"version":3,"sources":["../out/errors.js"],"names":["define","require","exports","Object","defineProperty","value","errors","argumentNull","parameterName","msg","Error","elementValidateRuleNotSet","element","name","fieldElementCanntNull","fieldIndex","elementNotExists","fieldResultExpectBooleanType"],"mappings":";;AAAAA,MAAM,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AACvD;;AACAC,EAAAA,MAAM,CAACC,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C;AAAEG,IAAAA,KAAK,EAAE;AAAT,GAA7C,EAFuD,CAGvD;;AACAH,EAAAA,OAAO,CAACI,MAAR,GAAiB;AACbC,IAAAA,YADa,wBACAC,aADA,EACe;AACxB,UAAIC,GAAG,uBAAgBD,aAAhB,+BAAP;AACA,aAAO,IAAIE,KAAJ,CAAUD,GAAV,CAAP;AACH,KAJY;AAKbE,IAAAA,yBALa,qCAKaC,OALb,EAKsB;AAC/B,UAAIH,GAAG,0BAASG,OAAO,CAACC,IAAjB,sDAAP;AACA,aAAO,IAAIH,KAAJ,CAAUD,GAAV,CAAP;AACH,KARY;AASbK,IAAAA,qBATa,iCASSC,UATT,EASqB;AAC9B;AACA,UAAIN,GAAG,GAAGM,UAAU,IAAI,IAAd,0EAC0DA,UAD1D,2CAAV;AAGA,aAAO,IAAIL,KAAJ,CAAUD,GAAV,CAAP;AACH,KAfY;AAgBbO,IAAAA,gBAhBa,4BAgBIH,IAhBJ,EAgBU;AACnB,UAAIJ,GAAG,qBAAcI,IAAd,+BAAP;AACA,aAAO,IAAIH,KAAJ,CAAUD,GAAV,CAAP;AACH,KAnBY;AAoBbQ,IAAAA,4BApBa,wCAoBgBJ,IApBhB,EAoBsB;AAC/B,UAAIJ,GAAG,uBAAgBI,IAAhB,gCAAP;AACA,aAAO,IAAIH,KAAJ,CAAUD,GAAV,CAAP;AACH;AAvBY,GAAjB;AAyBH,CA7BK,CAAN,C,CA8BA","sourcesContent":["define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    // namespace dilu {\r\n    exports.errors = {\r\n        argumentNull(parameterName) {\r\n            let msg = `Parameter ${parameterName} can not be null or empty.`;\r\n            return new Error(msg);\r\n        },\r\n        elementValidateRuleNotSet(element) {\r\n            let msg = `元素'${element.name}'没有设置验证规则`;\r\n            return new Error(msg);\r\n        },\r\n        fieldElementCanntNull(fieldIndex) {\r\n            // if (fieldIndex != null)\r\n            let msg = fieldIndex != null ?\r\n                `The element value in the field cannt be null, field index is ${fieldIndex}.` :\r\n                `The element in the field is null`;\r\n            return new Error(msg);\r\n        },\r\n        elementNotExists(name) {\r\n            let msg = `Element ${name} is not exits in the form.`;\r\n            return new Error(msg);\r\n        },\r\n        fieldResultExpectBooleanType(name) {\r\n            let msg = `Result of ${name} field is expected boolean.`;\r\n            return new Error(msg);\r\n        }\r\n    };\r\n});\r\n// }\r\n"],"file":"errors.js"}