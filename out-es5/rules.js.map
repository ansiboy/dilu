{"version":3,"sources":["../out/rules.js"],"names":["define","require","exports","formValidator_1","Object","defineProperty","value","ruleRegex","numericRegex","integerRegex","decimalRegex","emailRegex","alphaRegex","alphaNumericRegex","alphaDashRegex","naturalRegex","naturalNoZeroRegex","ipRegex","base64Regex","numericDashRegex","urlRegex","mobileRegex","dateRegex","msgs","required","matches","equal","email","valid_emails","minLength","maxLength","exact_length","greater_than","less_than","alpha","alpha_numeric","alpha_dash","numeric","integer","decimal","is_natural","is_natural_no_zero","ip","valid_base64","valid_credit_card","is_file_type","valid_url","greater_than_date","less_than_date","greater_than_or_equal_date","less_than_or_equal_date","mobile","custom","createValidation","validate","error","calc","rules","otherElement","FormValidator","elementValue","test","length","greaterThan","o","elementValueCompare","lessThan","url","otherValue","parseFloat","getValidDate","date","match","validDate","Date","validDateArray","split","setFullYear","setMonth","setDate"],"mappings":"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","sourcesContent":["define([\"require\", \"exports\", \"./formValidator\"], function (require, exports, formValidator_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    // namespace dilu {\r\n    var ruleRegex = /^(.+?)\\[(.+)\\]$/, numericRegex = /^[0-9]+$/, integerRegex = /^\\-?[0-9]+$/, decimalRegex = /^\\-?[0-9]*\\.?[0-9]+$/, emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/, alphaRegex = /^[a-z]+$/i, alphaNumericRegex = /^[a-z0-9]+$/i, alphaDashRegex = /^[a-z0-9_\\-]+$/i, naturalRegex = /^[0-9]+$/i, naturalNoZeroRegex = /^[1-9][0-9]*$/i, ipRegex = /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/i, base64Regex = /[^a-zA-Z0-9\\/\\+=]/i, numericDashRegex = /^[\\d\\-\\s]+$/, urlRegex = /^((http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)|)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/, mobileRegex = /^1[34578]\\d{9}$/, dateRegex = /\\d{4}-\\d{1,2}-\\d{1,2}/;\r\n    let msgs = {\r\n        required: '%s不能为空',\r\n        matches: '%s与%s不匹配',\r\n        \"default\": 'The %s field is still set to default, please change.',\r\n        equal: '%s和%s必须相同',\r\n        email: '不是有效的邮箱地址',\r\n        valid_emails: 'The %s field must contain all valid email addresses.',\r\n        minLength: '%s至少包含%s个字符',\r\n        maxLength: '%s不能超过%s字符',\r\n        exact_length: 'The %s field must be exactly %s characters in length.',\r\n        greater_than: 'The %s field must contain a number greater than %s.',\r\n        less_than: 'The %s field must contain a number less than %s.',\r\n        alpha: 'The %s field must only contain alphabetical characters.',\r\n        alpha_numeric: 'The %s field must only contain alpha-numeric characters.',\r\n        alpha_dash: 'The %s field must only contain alpha-numeric characters, underscores, and dashes.',\r\n        numeric: '请数入数字',\r\n        integer: 'The %s field must contain an integer.',\r\n        decimal: 'The %s field must contain a decimal number.',\r\n        is_natural: 'The %s field must contain only positive numbers.',\r\n        is_natural_no_zero: 'The %s field must contain a number greater than zero.',\r\n        ip: 'The %s field must contain a valid IP.',\r\n        valid_base64: 'The %s field must contain a base64 string.',\r\n        valid_credit_card: 'The %s field must contain a valid credit card number.',\r\n        is_file_type: 'The %s field must contain only %s files.',\r\n        valid_url: 'The %s field must contain a valid URL.',\r\n        greater_than_date: 'The %s field must contain a more recent date than %s.',\r\n        less_than_date: 'The %s field must contain an older date than %s.',\r\n        greater_than_or_equal_date: 'The %s field must contain a date that\\'s at least as recent as %s.',\r\n        less_than_or_equal_date: 'The %s field must contain a date that\\'s %s or older.',\r\n        mobile: '请输入正确的手机号码',\r\n        custom: '请输入正确制',\r\n    };\r\n    function createValidation(validate, error) {\r\n        return {\r\n            validate: validate,\r\n            error: error\r\n        };\r\n    }\r\n    function calc(value) {\r\n        if (typeof value == 'function') {\r\n            return value();\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * 表单验证规则\r\n     */\r\n    exports.rules = {\r\n        /**\r\n         * 验证必填字段\r\n         * @param error 错误提示文字\r\n         */\r\n        required(error) {\r\n            let validate = (value) => value != '';\r\n            return createValidation(validate, error || msgs.required);\r\n        },\r\n        /**\r\n         * 验证两个字段值是否相等\r\n         * @param otherElement 另外一个字段\r\n         * @param error 错误提示文字\r\n         */\r\n        matches(otherElement, error) {\r\n            var validate = (value) => value == formValidator_1.FormValidator.elementValue(otherElement);\r\n            return createValidation(validate, error || msgs.required);\r\n        },\r\n        /**\r\n         * 验证邮箱\r\n         * @param error 错误提示文字\r\n         */\r\n        email(error) {\r\n            var validate = (value) => emailRegex.test(value);\r\n            return createValidation(validate, error || msgs.required);\r\n        },\r\n        /**\r\n         * 验证字段最小长度\r\n         * @param length 最小长度\r\n         * @param error 错误提示文字\r\n         */\r\n        minLength(length, error) {\r\n            var validate = (value) => (value || '').length >= calc(length);\r\n            return createValidation(validate, error || msgs.minLength);\r\n        },\r\n        /**\r\n         * 验证字段的最大长度\r\n         * @param length 最大长度\r\n         * @param error 错误提示文字\r\n         */\r\n        maxLength(length, error) {\r\n            var validate = (value) => (value || '').length <= calc(length);\r\n            return createValidation(validate, error || msgs.matches);\r\n        },\r\n        /**\r\n         * 验证字段大于指定的值\r\n         * @param value 指定的值\r\n         * @param error 错误提示文字\r\n         */\r\n        greaterThan(value, error) {\r\n            var validate = (o) => elementValueCompare(o, calc(value)) == 'greaterThan';\r\n            return createValidation(validate, error || msgs.greater_than);\r\n        },\r\n        /**\r\n         * 验证字段小于指定的值\r\n         * @param value 指定的值\r\n         * @param error 错误提示文字\r\n         */\r\n        lessThan(value, error) {\r\n            var validate = (o) => elementValueCompare(o, calc(value)) == 'lessThan';\r\n            return createValidation(validate, error || msgs.less_than);\r\n        },\r\n        /**\r\n         * 验证字段等于指定的值\r\n         * @param value 指定的值\r\n         * @param error 错误提示文字\r\n         */\r\n        equal(value, error) {\r\n            var validate = (o) => elementValueCompare(o, calc(value)) == 'equal';\r\n            return createValidation(validate, error || msgs.equal);\r\n        },\r\n        /**\r\n         * 验证字段为 IP\r\n         * @param error 错误提示文字\r\n         */\r\n        ip(error) {\r\n            var validate = (value) => ipRegex.test(value);\r\n            return createValidation(validate, error || msgs.ip);\r\n        },\r\n        /**\r\n         * 验证字段为 URL\r\n         * @param error 错误提示文字\r\n         */\r\n        url(error) {\r\n            var validate = (value) => urlRegex.test(value);\r\n            return createValidation(validate, error || msgs.valid_url);\r\n        },\r\n        /**\r\n         * 验证字段为手机号码\r\n         * @param error 错误提示文字\r\n         */\r\n        mobile(error) {\r\n            var validate = (value) => mobileRegex.test(value);\r\n            return createValidation(validate, error || msgs.mobile);\r\n        },\r\n        /**\r\n         * 验证字段为数字\r\n         * @param error 错误提示文字\r\n         */\r\n        numeric(error) {\r\n            var validate = (value) => numericRegex.test(value);\r\n            return createValidation(validate, error || msgs.numeric);\r\n        },\r\n        /**\r\n         * 自定义验证\r\n         * @param validate 自定义验证的方法\r\n         * @param error 错误提示文字\r\n         */\r\n        custom(validate, error) {\r\n            return createValidation(validate, error || msgs.custom);\r\n        }\r\n    };\r\n    function elementValueCompare(value, otherValue) {\r\n        let elementValue;\r\n        if (typeof otherValue == 'number') {\r\n            elementValue = decimalRegex.test(value) ? parseFloat(value) : null;\r\n        }\r\n        else if (typeof otherValue == 'string') {\r\n            elementValue = value;\r\n        }\r\n        else {\r\n            elementValue = getValidDate(value);\r\n        }\r\n        if (elementValue < otherValue)\r\n            return 'lessThan';\r\n        else if (elementValue > otherValue)\r\n            return 'greaterThan';\r\n        else\r\n            return 'equal';\r\n    }\r\n    /**\r\n     * private function _getValidDate: helper function to convert a string date to a Date object\r\n     * @param date (String) must be in format yyyy-mm-dd or use keyword: today\r\n     * @returns {Date} returns false if invalid\r\n     */\r\n    function getValidDate(date) {\r\n        if (!date.match('today') && !date.match(dateRegex)) {\r\n            return null;\r\n        }\r\n        var validDate = new Date(), validDateArray;\r\n        if (!date.match('today')) {\r\n            validDateArray = date.split('-');\r\n            validDate.setFullYear(validDateArray[0]);\r\n            validDate.setMonth(validDateArray[1] - 1);\r\n            validDate.setDate(validDateArray[2]);\r\n        }\r\n        return validDate;\r\n    }\r\n    ;\r\n});\r\n// }\r\n"],"file":"rules.js"}